from pydantic import BaseModel, ConfigDict
from google.genai import types
from google.genai.types import Type as GType
from typing import Optional
from textwrap import dedent
from typing import Literal


class Descriptor(BaseModel):
    model_config = ConfigDict(arbitrary_types_allowed=True)

    name: str
    sigla: Optional[str] = None
    instruction: str
    response_mime_type: Optional[str] = None
    response_schema: Optional[types.SchemaUnion] = None

    @property
    def system_instruction(self) -> str:
        return dedent(
            f"""
            ‚ö†Ô∏è Regras Gerais:
            - Responda apenas com JSON v√°lido;
            - Se a informa√ß√£o n√£o aparecer, n√£o a inclua;
            - Utilize datas no formato YYYY-MM-DD;
            - Os documentos podem estar em formato PDF ou imagem (JPG/PNG);
            - Sempre identifique o tipo de documento com base nos termos mais evidentes no conte√∫do;
            - Se n√£o for poss√≠vel identificar o documento, retorne um JSON vazio: `{{}}`;

            üìú Contexto
            {self.instruction}
        """
        )


nome = types.Schema(type=GType.STRING, description="Nome completo da pessoa referida no documento.")
cpf = types.Schema(type=GType.STRING, description="N√∫mero do CPF da pessoa referida no documento, no formato 000.000.000-00.", nullable=True)
data_nascimento = types.Schema(
    type=GType.STRING,
    format="date",
    description="Data de nascimento da pessoa referida no documento formato YYYY-MM-DD.",
    nullable=True,
)
data_emissao = types.Schema(
    type=GType.STRING,
    format="date",
    description="Data de emiss√£o do documento, deve ser expl√≠cita no documento formato YYYY-MM-DD.",
    nullable=True,
)
endereco = types.Schema(
    type=GType.OBJECT,
    description="Endere√ßo completo referente ao documento, ex.: resid√™ncia, local de atividade, etc.",
    properties={
        "rua": types.Schema(type=GType.STRING, description="Nome da rua."),
        "numero": types.Schema(type=GType.STRING, description="N√∫mero da resid√™ncia.", nullable=True),
        "complemento": types.Schema(type=GType.STRING, description="Complemento do endere√ßo.", nullable=True),
        "bairro": types.Schema(type=GType.STRING, description="Bairro."),
        "cidade": types.Schema(type=GType.STRING, description="Cidade, munic√≠pio, localidade."),
        "estado": types.Schema(
            type=GType.STRING,
            description="Estado, sigla de duas letras. Caso esteja presente o nome completo, converta para sigla.",
        ),
        "cep": types.Schema(type=GType.STRING, description="CEP no formato 00000-000.", nullable=True),
    },
    required=["rua", "numero", "bairro", "cidade", "estado", "cep"],
)
CNIS = Descriptor(
    name="Cadastro Nacional de Informa√ß√µes Sociais",
    sigla="CNIS",
    instruction="""
        O CNIS (Cadastro Nacional de Informa√ß√µes Sociais) √© um documento emitido pelo INSS que re√∫ne o hist√≥rico laboral e previdenci√°rio de uma pessoa,
        incluindo v√≠nculos empregat√≠cios, contribui√ß√µes, per√≠odos de atividade e dados cadastrais.

        ‚öñÔ∏è Contexto Jur√≠dico:
        No caso de pescadores profissionais, o CNIS √© utilizado para comprovar o exerc√≠cio da atividade pesqueira e a condi√ß√£o de Segurado Especial,
        requisito essencial para a concess√£o do Seguro-Defeso.

        A IA deve verificar:
        - Se o documento cont√©m v√≠nculo ativo de "Segurado Especial" ou contribui√ß√µes compat√≠veis com a pesca artesanal;
        - Se o per√≠odo aquisitivo do defeso (12 meses anteriores √† abertura do defeso) est√° completo;
        - Se h√° outros v√≠nculos empregat√≠cios ou benef√≠cios incompat√≠veis com o Seguro-Defeso (ex: empregos urbanos, aposentadoria, etc.);
        - Datas de in√≠cio e fim da atividade pesqueira registradas no CNIS.

        Campos esperados no CNIS:
        - Nome completo do pescador;
        - CPF;
        - NIS/PIS/PASEP;
        - Data de nascimento;
        - Nome da m√£e (se constar);
        - Categoria do segurado (ex: Empregado, Contribuinte Individual, Segurado Especial);
        - Data de in√≠cio e fim da atividade de Segurado Especial;
        - Situa√ß√£o do v√≠nculo (ativo ou encerrado);
        - Indica√ß√£o se o per√≠odo aquisitivo do defeso est√° completo (True/False);
        - Outros v√≠nculos e remunera√ß√µes, se existirem;
        - √ìrg√£o emissor: normalmente ‚ÄúINSS‚Äù.
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "nome": nome,
            "cpf": cpf,
            "nis": types.Schema(
                type=GType.STRING,
                description="N√∫mero de inscri√ß√£o social (NIS, PIS ou PASEP)."
            ),
            "data_nascimento": data_nascimento,
            "mae": types.Schema(
                type=GType.STRING,
                description="Nome da m√£e do pescador."
            ),
            "categoria": types.Schema(
                type=GType.STRING,
                description="Categoria do segurado (ex: Segurado Especial, Contribuinte Individual, etc.)."
            ),
            "data_inicio_atividade": types.Schema(
                type=GType.STRING,
                format="date",
                description="Data de in√≠cio da atividade de Segurado Especial."
            ),
            "data_fim_atividade": types.Schema(
                type=GType.STRING,
                format="date",
                description="Data de fim da atividade de Segurado Especial (se houver).",
                nullable=True
            ),
            "periodo_aquisitivo_defeso": types.Schema(
                type=GType.BOOLEAN,
                description=(
                    "Indica se o pescador possui atividade pesqueira ou contribui√ß√µes nos 12 meses "
                    "anteriores ao in√≠cio do per√≠odo de defeso (True = cumpre, False = n√£o cumpre)."
                )
            ),
            "outros_vinculos": types.Schema(
                type=GType.ARRAY,
                description="Lista de v√≠nculos empregat√≠cios n√£o relacionados √† pesca.",
                items=types.Schema(
                    type=GType.OBJECT,
                    properties={
                        "cnpj": types.Schema(type=GType.STRING, description="CNPJ do empregador."),
                        "razao_social": types.Schema(type=GType.STRING, description="Raz√£o social do empregador."),
                        "data_admissao": types.Schema(type=GType.STRING, format="date", description="Data de admiss√£o."),
                        "data_demissao": types.Schema(type=GType.STRING, format="date", description="Data de demiss√£o."),
                        "categoria": types.Schema(type=GType.STRING, description="Categoria do v√≠nculo."),
                        "situacao": types.Schema(
                            type=GType.STRING,
                            description="Situa√ß√£o do v√≠nculo.",
                            enum=["ativo", "encerrado", "suspenso", "outros"],
                        ),
                    },
                    required=["cnpj", "razao_social", "data_admissao", "categoria", "situacao"],
                ),
            ),
            "orgao_emissor": types.Schema(
                type=GType.STRING,
                description="√ìrg√£o emissor do documento, normalmente 'INSS'."
            ),
        },
        required=[
            "nome",
            "cpf",
            "nis",
            "categoria",
            "data_inicio_atividade",
            "periodo_aquisitivo_defeso",
            "orgao_emissor",
        ],
    ),
)


RGP = Descriptor(
    name="Registro Geral da Pesca",
    sigla="RGP",
    instruction="""
        O Certificado de Regularidade (Carteira RGP) √© um documento emitido pelo Minist√©rio da Pesca e Aquicultura (MPA) que comprova o registro ativo de um pescador no Registro Geral da Pesca (RGP). Ele serve como identifica√ß√£o oficial do pescador profissional e √© obrigat√≥rio para acesso a benef√≠cios como o Seguro-Desemprego do Pescador Artesanal (Seguro-Defeso).

        Este documento normalmente apresenta informa√ß√µes de identifica√ß√£o pessoal, profissional e administrativa do registro, podendo variar conforme o layout, mas deve conter os seguintes dados principais:

        Campos esperados no RGP:
            - Nome completo do pescador(a).
            - N√∫mero do CPF.
            - N√∫mero de registro no Registro Geral da Pesca.
            - Tipo de atividade exercida (ex: pescador artesanal, armador, aquicultor, etc.).
            - Categoria ou subcategoria dentro da modalidade, se houver.
            - Data de emiss√£o do certificado.
            - Data do primeiro registro - ‚ÄúData 1¬∫ RGP‚Äù indica o primeiro registro do pescador no sistema do Minist√©rio da Pesca.
            - Situa√ß√£o do registro (ativo, suspenso, cancelado, etc.).
            - Munic√≠pio do domic√≠lio do pescador.
            - Unidade Federativa (estado).
            - √ìrg√£o emissor do documento, normalmente ‚ÄúMinist√©rio da Pesca e Aquicultura‚Äù ou equivalente.
        O documento pode estar em formato PDF ou imagem (JPEG, PNG), com logotipo oficial, bras√£o da Rep√∫blica, e QR Code de autentica√ß√£o.
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "nome": nome,
            "cpf": cpf,
            "rgp": types.Schema(type=GType.INTEGER, description="N√∫mero de registro no Registro Geral da Pesca."),
            "atividade": types.Schema(type=GType.STRING, description="Tipo de atividade exercida."),
            "categoria": types.Schema(type=GType.STRING, description="Categoria ou subcategoria dentro da modalidade."),
            "data_emissao": data_emissao,
            "data_primeiro_registro": types.Schema(type=GType.STRING, format="date", description="Data referente ao primeiro registro."),
            "situacao": types.Schema(type=GType.STRING, description="Situa√ß√£o do registro.", enum=["ativo", "suspenso", "cancelado", "outros"]),
            "endereco": endereco,
            "orgao_emissor": types.Schema(type=GType.STRING, description="√ìrg√£o emissor do documento."),
        },
        required=["nome", "cpf", "rgp", "atividade", "data_emissao", "situacao", "endereco", "orgao_emissor"],
    ),
)

CAEPF = Descriptor(
    name="Cadastro de Atividade Econ√¥mica da Pessoa F√≠sica",
    sigla="CAEPF",
    instruction="""
        O CAEPF (Cadastro de Atividade Econ√¥mica da Pessoa F√≠sica) √© um registro administrado pela Receita Federal do Brasil que identifica as atividades econ√¥micas exercidas por pessoas f√≠sicas, como produtores rurais, profissionais aut√¥nomos, empregadores dom√©sticos e contribuintes individuais.

        O documento (comprovante ou certificado de inscri√ß√£o) cont√©m informa√ß√µes cadastrais da pessoa f√≠sica e da atividade registrada. Ele √© utilizado para fins fiscais, previdenci√°rios e trabalhistas, e pode ser apresentado em PDF ou imagem (JPEG, PNG).

        Campos esperados no CAEPF:
        - Nome completo da pessoa f√≠sica titular do cadastro.
        - CPF do titular.
        - N√∫mero de inscri√ß√£o no CAEPF.
        - Data de abertura ou inscri√ß√£o.
        - Situa√ß√£o atual do cadastro (ativa, suspensa, cancelada, etc.).
        - Descri√ß√£o da atividade econ√¥mica principal.
        - C√≥digo CNAE da atividade principal.
        - Endere√ßo completo do local de atividade.
        - Munic√≠pio.
        - Unidade Federativa (estado).
        - √ìrg√£o emissor, geralmente ‚ÄúReceita Federal do Brasil‚Äù.
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "nome": nome,
            "cpf": cpf,
            "caepf": types.Schema(type=GType.INTEGER, description="N√∫mero de inscri√ß√£o no CAEPF."),
            "data_inscricao": types.Schema(type=GType.STRING, format="date", description="Data de abertura ou inscri√ß√£o."),
            "situacao": types.Schema(
                type=GType.STRING,
                description="Situa√ß√£o atual do cadastro.",
                enum=["ativa", "suspensa", "cancelada", "outros"],
            ),
            "atividade_principal": types.Schema(type=GType.STRING, description="Descri√ß√£o da atividade econ√¥mica principal."),
            "codigo_cnae": types.Schema(type=GType.STRING, description="C√≥digo CNAE da atividade principal."),
            "endereco": endereco,
            "orgao_emissor": types.Schema(type=GType.STRING, description="√ìrg√£o emissor do documento."),
        },
        required=["nome", "cpf", "caepf", "data_inscricao", "situacao", "atividade_principal", "codigo_cnae", "endereco", "orgao_emissor"],
    ),
)

COMPROVANTE_RESIDENCIA = Descriptor(
    name="Comprovante de Resid√™ncia",
    sigla="COMPROVANTE_RESIDENCIA",
    instruction="""
        O Comprovante de Resid√™ncia √© um documento que atesta o endere√ßo residencial de uma pessoa.
        Pode estar em formato PDF texto ou PDF imagem (escaneado/fotografado).

        Caso o documento esteja em formato de imagem, utilize OCR visual (interpreta√ß√£o de texto em imagem)
        para identificar os dados impressos.

        Campos esperados:
        - Nome do titular do comprovante;
        - Endere√ßo completo (rua, n√∫mero, bairro, cidade, estado, CEP);
        - Data de emiss√£o (ou vencimento, se for conta de consumo);
        - Entidade emissora (companhia de luz, √°gua, telefone etc.);
        - Tipo de documento (conta de energia, conta de √°gua, etc.).
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "nome": nome,
            "endereco": endereco,
            "data_emissao": data_emissao,
            "entidade_emissora": types.Schema(type=GType.STRING, description="Nome da entidade emissora, ex: Equatorial Energia."),
            "tipo_documento": types.Schema(type=GType.STRING, description="Tipo do comprovante, ex: conta de luz, √°gua, telefone."),
        },
        required=["nome", "endereco", "data_emissao", "entidade_emissora"],
    ),
)


TERMO_REPRESENTACAO = Descriptor(
    name="Termo de Representa√ß√£o e Procura√ß√£o",
    sigla="TERMO_REPRESENTACAO",
    instruction="""
        O Termo de Representa√ß√£o e Procura√ß√£o √© o documento que autoriza advogados a representar o pescador em processos administrativos e judiciais, como solicita√ß√µes de seguro-defeso ou regulariza√ß√£o de registros.

        O documento deve conter os seguintes elementos essenciais:
        - Nome completo do pescador (outorgante);
        - Nome(s) do(s) advogado(s) respons√°vel(is);
        - Data de emiss√£o e/ou validade;
        - Assinatura do pescador;
        - Identifica√ß√£o do tipo de documento (Termo, Procura√ß√£o, Autoriza√ß√£o, etc.);
        - Cabe√ßalho institucional (caso emitido por escrit√≥rio ou entidade reconhecida).

        ‚ö†Ô∏è Regras adicionais:
        - Verificar se o advogado "Rhycleyson Campos Paiva Martins" consta obrigatoriamente;
        - Confirmar se o documento est√° assinado pelo pescador.
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "nome_pescador": nome,
            "advogados": types.Schema(
                type=GType.ARRAY,
                items=types.Schema(type=GType.STRING, description="Nome do advogado respons√°vel."),
                description="Lista dos advogados citados no termo.",
            ),
            "assinatura_pescador": types.Schema(type=GType.BOOLEAN, description="Indica se o documento est√° assinado pelo pescador."),
            "data_emissao": data_emissao,
            "validade": types.Schema(type=GType.STRING, format="date", description="Data de validade, se constar."),
            "orgao_emissor": types.Schema(type=GType.STRING, description="Nome do escrit√≥rio ou entidade emissora do termo.", nullable=True),
        },
        required=["nome_pescador", "advogados", "assinatura_pescador", "data_emissao"],
    ),
)

GPS = Descriptor(
    name="Guia da Previd√™ncia Social (GPS)",
    sigla="GPS",
    instruction="""
        A Guia da Previd√™ncia Social (GPS) √© o comprovante de recolhimento da contribui√ß√£o previdenci√°ria individual ou empresarial. 
        Para o pescador, serve para comprovar recolhimento ao INSS no per√≠odo de atividade pesqueira.

        Campos esperados no documento:
        - Nome completo do contribuinte (pescador);
        - CPF;
        - C√≥digo de pagamento (normalmente 1910, 2003, 2100 ou similar);
        - Compet√™ncia (m√™s/ano de refer√™ncia do pagamento);
        - Valor pago;
        - Data de pagamento;
        - Banco recebedor;
        - Identifica√ß√£o ‚ÄúGPS‚Äù no t√≠tulo do documento.
        
        ‚ö†Ô∏è Regras adicionais:
        - Verificar o ‚Äúper√≠odo de apura√ß√£o‚Äù indicado no documento.
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "nome": nome,
            "cpf": cpf,
            "codigo_pagamento": types.Schema(type=GType.STRING, description="C√≥digo de pagamento da GPS."),
            "competencia": types.Schema(type=GType.STRING, description="M√™s/ano de refer√™ncia da contribui√ß√£o (formato MM/YYYY)."),
            "valor_pago": types.Schema(type=GType.NUMBER, description="Valor total pago conforme documento."),
            "data_pagamento": data_emissao,
            "banco": types.Schema(type=GType.STRING, description="Banco recebedor."),
            "periodo_apuracao": types.Schema(type=GType.STRING, description="Per√≠odo de apura√ß√£o do recolhimento."),
        },
        required=["nome", "cpf", "competencia", "valor_pago", "data_pagamento"],
    ),
)

BIOMETRIA = Descriptor(
    name="Comprovante de Biometria",
    sigla="BIOMETRIA",
    instruction="""
        O comprovante de biometria √© uma captura (print ou PDF) emitida pela Justi√ßa Eleitoral confirmando o cadastro biom√©trico do eleitor.

        Campos esperados no documento:
        - Nome completo do eleitor(a);
        - CPF (se dispon√≠vel);
        - N√∫mero do t√≠tulo de eleitor;
        - Munic√≠pio e estado de cadastro;
        - Frase ‚ÄúELEITOR/ELEITORA COM BIOMETRIA COLETADA‚Äù ou equivalente;
        - Data de emiss√£o (caso conste).
        
        ‚ö†Ô∏è Regra obrigat√≥ria:
        - O campo 'biometria_coletada' deve ser verdadeiro apenas se o documento contiver a express√£o acima.
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "nome": nome,
            "cpf": cpf,
            "titulo_eleitor": types.Schema(type=GType.STRING, description="N√∫mero do t√≠tulo de eleitor."),
            "municipio": types.Schema(type=GType.STRING, description="Munic√≠pio do cadastro biom√©trico."),
            "estado": types.Schema(type=GType.STRING, description="UF do cadastro biom√©trico."),
            "biometria_coletada": types.Schema(
                type=GType.BOOLEAN,
                description="Verdadeiro se constar a frase 'ELEITOR/ELEITORA COM BIOMETRIA COLETADA'.",
            ),
            "data_emissao": data_emissao,
        },
        required=["nome", "titulo_eleitor", "biometria_coletada"],
    ),
)

REAP = Descriptor(
    name="Relat√≥rio de Exerc√≠cio da Atividade Pesqueira (REAP)",
    sigla="REAP",
    instruction="""
        O Relat√≥rio de Exerc√≠cio da Atividade Pesqueira (REAP) √© um documento obrigat√≥rio para comprovar
        o exerc√≠cio da atividade pesqueira em cada ano civil.

        ‚öôÔ∏è Finalidade:
        Verificar se todos os REAPs referentes aos anos de 2021, 2022, 2023 e 2024 est√£o dispon√≠veis
        na pasta de documentos do pescador.

        ‚ö†Ô∏è Regras obrigat√≥rias:
        - Confirme a exist√™ncia dos arquivos REAP_2021, REAP_2022, REAP_2023 e REAP_2024 (ou equivalentes);
        - Se faltar algum ano, liste quais n√£o foram encontrados;
        - Caso todos estejam presentes, marque o campo ‚Äúcompleto‚Äù como verdadeiro.

        O documento pode estar em formato PDF ou imagem, e deve conter identifica√ß√£o do pescador e assinatura,
        mas essa verifica√ß√£o n√£o √© obrigat√≥ria neste est√°gio.
    """,
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=GType.OBJECT,
        properties={
            "anos_verificados": types.Schema(
                type=GType.ARRAY,
                description="Lista dos anos encontrados (ex: [2021, 2022, 2023, 2024]).",
                items=types.Schema(type=GType.INTEGER),
            ),
            "anos_faltando": types.Schema(
                type=GType.ARRAY,
                description="Lista dos anos ausentes (ex: [2022, 2023]).",
                items=types.Schema(type=GType.INTEGER),
            ),
            "completo": types.Schema(
                type=GType.BOOLEAN,
                description="True se todos os REAPs de 2021 a 2024 estiverem presentes.",
            ),
        },
        required=["anos_verificados", "completo"],
    ),
)



type Type = Literal[
    "CADASTRO_NACIONAL_INFORMACAO_SOCIAL",
    "CADASTRO_ATIVIDADE_ECONOMICA_PESSOA_FISICA",
    "COMPROVANTE_RESIDENCIA",
    "REGISTRO_GERAL_PESCA",
    "TERMO_REPRESENTACAO",
    "GPS",
    "BIOMETRIA",
    "RELATORIO_ATIVIDADE_PESQUEIRA",
]

REGISTRY: dict[Type, Descriptor] = {
    "CADASTRO_NACIONAL_INFORMACAO_SOCIAL": CNIS,
    "CADASTRO_ATIVIDADE_ECONOMICA_PESSOA_FISICA": CAEPF,
    "COMPROVANTE_RESIDENCIA": COMPROVANTE_RESIDENCIA,
    "REGISTRO_GERAL_PESCA": RGP,
    "TERMO_REPRESENTACAO": TERMO_REPRESENTACAO,
    "GPS": GPS,
    "BIOMETRIA": BIOMETRIA,
    "RELATORIO_ATIVIDADE_PESQUEIRA": REAP,
}