# =====================================================
# Script: file_reader.py
# Autor: Walber Vidigal
# Descri√ß√£o:
#   L√™ todos os PDFs e imagens da pasta "pasta envio",
#   envia diretamente para o modelo Gemini 2.0 Flash-Lite
#   e salva as respostas na mem√≥ria do agente (Redis),
#   permitindo perguntas posteriores sobre os documentos.
# =====================================================

import os
import json
from dotenv import load_dotenv
import google.generativeai as genai
from agent import GeminiAgent  # Importa o agente com mem√≥ria

# 1Ô∏è‚É£ Carrega vari√°veis de ambiente
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")

if not API_KEY:
    raise ValueError("‚ùå Chave GEMINI_API_KEY n√£o encontrada no .env")

# 2Ô∏è‚É£ Configura o modelo Gemini 2.0 Flash-Lite
genai.configure(api_key=API_KEY)
MODEL_NAME = "models/gemini-2.0-flash-lite"

# 3Ô∏è‚É£ Pasta onde est√£o os arquivos
PASTA_ENVIO = "pasta envio"

# 4Ô∏è‚É£ Prompt aprimorado de instru√ß√µes
PROMPT_BASE = """
  Voc√™ √© um analista jur√≠dico especializado em processos de pescadores profissionais.
  Analise o documento enviado (PDF ou imagem) e identifique se ele √© um:
  1Ô∏è‚É£ Certificado de Regularidade / Carteira RGP, ou
  2Ô∏è‚É£ CAEPF (Cadastro de Atividade Econ√¥mica da Pessoa F√≠sica), ou
  3Ô∏è‚É£ Comprovante de Resid√™ncia, ou
  4Ô∏è‚É£ CNIS (Cadastro Nacional de Informa√ß√µes Sociais).

  ‚ö†Ô∏è Regras Gerais:
  - Responda apenas com JSON v√°lido.
  - Se a informa√ß√£o n√£o aparecer, escreva "N√£o dispon√≠vel".
  - Utilize datas no formato DD/MM/AAAA.
  - Os documentos podem estar em formato PDF ou imagem (JPG/PNG).
  - Sempre identifique o tipo de documento com base nos termos mais evidentes no conte√∫do.

  üìú Regras espec√≠ficas:

  - Para Certificado de Regularidade (Carteira RGP):
    - Procure express√µes como "Certificado de Registro", "RGP", "Registro Geral da Pesca".
    - Retorne apenas a data do primeiro registro, normalmente indicada por "Data do Primeiro Registro" ou similar.

  - Para CAEPF:
    - Procure express√µes como "Cadastro de Atividade Econ√¥mica da Pessoa F√≠sica" ou "CAEPF".
    - Identifique a data de in√≠cio da atividade e, se dispon√≠vel, o tipo de pesca (√Ågua Doce, √Ågua Salgada, etc.).

  - Para Comprovantes de Resid√™ncia (contas de energia, √°gua, telefone, etc.):
    - Procure e retorne **a data de vencimento da fatura** como `Data_vencimento`.
    - Use express√µes como ‚ÄúVencimento‚Äù, ‚ÄúVenc.‚Äù, ‚ÄúData de Venc.‚Äù ou similares.
    - Priorize essa data mesmo que haja outras datas (emiss√£o, leitura, refer√™ncia, etc.).
    - Inclua tamb√©m nome do titular e endere√ßo se dispon√≠veis.

  - Para CNIS (Cadastro Nacional de Informa√ß√µes Sociais):
    - Procure express√µes como "CNIS", "Cadastro Nacional de Informa√ß√µes Sociais", "Extrato Previdenci√°rio" ou "INSS".
    - Extraia:
      - Nome completo do segurado.
      - CPF e NIT.
      - V√≠nculos empregat√≠cios, incluindo nome da empresa, CNPJ, e datas de in√≠cio e fim.
      - Indica√ß√£o de segurado especial, se constar.
    - Verifique se h√° **per√≠odo aquisitivo do defeso**, considerando os 12 meses anteriores √† data mais recente do extrato.
    - Utilize a data mais recente do documento (ex: data do extrato ou data final de v√≠nculo) como refer√™ncia para c√°lculo do per√≠odo aquisitivo.
    - Caso apare√ßam benef√≠cios ativos ou outros v√≠nculos, liste-os.

  üìò Campos esperados:

  - Se for um Certificado de Regularidade:
    {
      "CERTIFICADO_DE_REGULARIDADE": {
        "Data_primeiro_registro": "..."
      }
    }

  - Se for um CAEPF:
    {
      "CAEPF": {
        "Data_inicio_atividade": "...",
        "Tipo_pesca": "(√Ågua doce, √Ågua salgada, ou N√£o dispon√≠vel)"
      }
    }

  - Se for um Comprovante de Resid√™ncia (como contas de energia, √°gua, telefone, etc.):
    {
      "COMPROVANTE_DE_RESIDENCIA": {
        "Data_vencimento": "..."
      }
    }

  - Se for um CNIS (Cadastro Nacional de Informa√ß√µes Sociais):
    {
      "CNIS": {
        "Nome": "...",
        "CPF": "...",
        "NIT": "...",
        "Vinculos_empregaticios": [
          {
            "Empresa": "...",
            "CNPJ": "...",
            "Data_inicio": "...",
            "Data_fim": "...",
            "Tipo_vinculo": "(Empregado, Segurado Especial, etc.)"
          }
        ],
        "Possui_beneficio_ativo": "(Sim ou N√£o)",
        "Periodo_aquisitivo_defeso": {
          "Data_inicio": "...",
          "Data_fim": "..."
        }
      }
    }
"""



# 5Ô∏è‚É£ Fun√ß√£o principal
def analisar_arquivos():
    # Inicializa o agente com mem√≥ria
    agente = GeminiAgent(user_id="walber_local")

    resultados = {}
    arquivos = [f for f in os.listdir(PASTA_ENVIO) if f.lower().endswith((".pdf", ".png", ".jpg", ".jpeg"))]

    if not arquivos:
        print("‚ö†Ô∏è Nenhum arquivo encontrado na pasta:", PASTA_ENVIO)
        return

    print(f"üìÇ {len(arquivos)} arquivo(s) encontrados na pasta '{PASTA_ENVIO}'. Enviando para an√°lise...\n")

    for arquivo in arquivos:
        caminho = os.path.join(PASTA_ENVIO, arquivo)
        print(f"üì§ Enviando '{arquivo}' para o modelo...")

        try:
            # Faz upload do arquivo para o Gemini
            uploaded_file = genai.upload_file(caminho)

            # Envia o arquivo + prompt ao modelo
            model = genai.GenerativeModel(MODEL_NAME)
            response = model.generate_content(
                [PROMPT_BASE, uploaded_file],
                generation_config=genai.types.GenerationConfig(
                    temperature=0.2,
                    top_p=0.3,
                    top_k=1,
                    max_output_tokens=1024
                )
            )

            resposta = response.text.strip() if response.text else "Sem resposta"

            # üß© Limpa blocos de c√≥digo Markdown
            if resposta.startswith("```"):
                resposta = resposta.replace("```json", "").replace("```", "").strip()

            # üß† Tenta converter em JSON v√°lido
            try:
                resposta_json = json.loads(resposta)
                resultados[arquivo] = resposta_json
            except json.JSONDecodeError:
                resultados[arquivo] = resposta

            # üîπ Armazena o contexto no Redis via agente
            contexto_memoria = f"O documento '{arquivo}' foi analisado e retornou os seguintes dados:\n{resposta}"
            agente.agente_responde(contexto_memoria)

            print(f"‚úÖ An√°lise conclu√≠da e registrada na mem√≥ria para '{arquivo}'.\n")


        except Exception as e:
            resultados[arquivo] = f"‚ùå Erro: {str(e)}"
            print(f"‚ùå Falha ao analisar '{arquivo}': {str(e)}\n")

    # Salva resultados em JSON local
    with open("resultado_analise.json", "w", encoding="utf-8") as f:
        json.dump(resultados, f, ensure_ascii=False, indent=2)

    print("üìë An√°lises conclu√≠das e salvas em 'resultado_analise.json'.")
    print("üß† Contextos tamb√©m armazenados na mem√≥ria do agente (Redis).")


# 6Ô∏è‚É£ Executar script diretamente
if __name__ == "__main__":
    analisar_arquivos()
